<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Clean;Test;Package" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
    <Platform>AnyCPU</Platform>
    <SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">$(MSBuildThisFileDirectory)</SolutionDir>
    <BuildProperties>Platform=$(Platform);SolutionDir=$(SolutionDir)</BuildProperties>
    <BuildProperties Condition="'$(InternalsInvisible)' != ''">$(BuildProperties);InternalsInvisible=$(InternalsInvisible)</BuildProperties>
    <BuildProperties Condition="'$(RunCodeAnalysis)' != ''">$(BuildProperties);RunCodeAnalysis=$(RunCodeAnalysis)</BuildProperties>
    <BuildProperties Condition="'$(StyleCopEnabled)' != ''">$(BuildProperties);StyleCopEnabled=$(StyleCopEnabled)</BuildProperties>
  </PropertyGroup>

  <PropertyGroup Condition="!Exists('$(PrivateKey)')">
    <PackageDependsOn>PackageUnsigned</PackageDependsOn>
  </PropertyGroup>
  <PropertyGroup Condition="Exists('$(PrivateKey)')">
    <PackageDependsOn>PackageSigned</PackageDependsOn>
  </PropertyGroup>

  <ItemGroup>
    <ProjectToBuild Include="src\ServiceModel.Composition\ServiceModel.Composition.csproj">
      <DelaySigning>true</DelaySigning>
    </ProjectToBuild>
    <ProjectToBuild Include="src\ServiceModel.Composition.Registration\ServiceModel.Composition.Registration.csproj">
      <DelaySigning>true</DelaySigning>
      <IgnoreConfiguration>.*Net40</IgnoreConfiguration>
    </ProjectToBuild>
    <ProjectToBuild Include="test\ServiceModel.Composition.Tests\ServiceModel.Composition.Tests.csproj">
    </ProjectToBuild>
  </ItemGroup>

  <ItemGroup>
    <NonCoreProjectToBuild Include="test\ServiceModel.Composition.Tests\ServiceModel.Composition.Tests.csproj">
      <RestorePackages>true</RestorePackages>
    </NonCoreProjectToBuild>
    <!--<NonCoreProjectToBuild Include="test\ServiceModel.Composition\UnitTests\UnitTests.csproj">
     <RestorePackages>true</RestorePackages>  
   </NonCoreProjectToBuild>-->
  </ItemGroup>

  <ItemGroup>
    <XunitAssembly Include="test\ServiceModel.Composition.Tests\bin\$(Configuration)\ServiceModel.Composition.Tests.dll" />
  </ItemGroup>

  <ItemGroup>
    <ProjectToBuild Include="@(NonCoreProjectToBuild)" Condition="'$(BuildCoreOnly)' != 'true'" />
  </ItemGroup>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), build.cmd))\tools\ServiceModel.Composition.props" />
  <Import Project="$(SolutionDir)\.nuget\nuget.targets" />

  <Target Name="ProjectWithConfigurationToBuild" Outputs="@(ProjectWithConfigurationToBuild)">
    <ItemGroup>
      <ProjectToBuildCartesian Include="@(ProjectToBuild)">
        <BuildConfiguration>%(BuildConfiguration.Identity)</BuildConfiguration>
      </ProjectToBuildCartesian>
      <ProjectWithConfigurationToBuild
        Include="@(ProjectToBuildCartesian)"
        Condition="('%(ProjectToBuildCartesian.IgnoreConfiguration)' == '') Or (!$([System.Text.RegularExpressions.Regex]::IsMatch('%(ProjectToBuildCartesian.BuildConfiguration)', '%(ProjectToBuildCartesian.IgnoreConfiguration)')))">
      </ProjectWithConfigurationToBuild>
    </ItemGroup>
  </Target>

  <Target Name="Clean" DependsOnTargets="ProjectWithConfigurationToBuild">
    <MSBuild Targets="Clean"
             Projects="@(ProjectWithConfigurationToBuild)"
             Properties="Configuration=%(ProjectWithConfigurationToBuild.BuildConfiguration);$(BuildProperties)"
             BuildInParallel="true" />
    <MSBuild Targets="Clean"
             Projects="src\NuGet\NuGet.proj"
             Properties="Configuration=$(Configuration)"
             Condition="'$(Configuration)' == '$(Configuration45)'" />
  </Target>

  <Target Name="RestorePackages">
    <PropertyGroup>
      <RequireRestoreConsent>false</RequireRestoreConsent>
    </PropertyGroup>
    <Message Text="Restoring NuGet packages..." Importance="High" />
    <MSBuild Projects="@(ProjectToBuild->WithMetadataValue('RestorePackages', 'true'))" 
             Targets="RestorePackages" 
             Properties="RequireRestoreConsent=$(RequireRestoreConsent)" />
  </Target>

  <Target Name="RestoreSolutionPackages" DependsOnTargets="CheckPrerequisites" AfterTargets="RestorePackages">
    <PropertyGroup>
      <PackagesConfig>$([System.IO.Path]::Combine($(NuGetToolsPath), "packages.config"))</PackagesConfig>
      <SolutionRequireConsentSwitch Condition=" $(RequireRestoreConsent) == 'true' ">-RequireConsent</SolutionRequireConsentSwitch>
      <RestoreCommand>$(NuGetCommand) install "$(PackagesConfig)" -source "$(PackageSources)"  $(SolutionRequireConsentSwitch) -solutionDir "$(SolutionDir) "</RestoreCommand>
    </PropertyGroup>
    <Exec Command="$(RestoreCommand)"
          LogStandardErrorAsError="true" />
  </Target>

  <Target Name="Build" DependsOnTargets="ProjectWithConfigurationToBuild;RestoreSolutionPackages">
    <MSBuild Targets="Build"
             Projects="@(ProjectWithConfigurationToBuild)"
             Properties="Configuration=%(ProjectWithConfigurationToBuild.BuildConfiguration);$(BuildProperties)"
             BuildInParallel="true">
      <Output ItemName="ProjectBuilt" TaskParameter="TargetOutputs"/>
    </MSBuild>
  </Target>

  <Target Name="Rebuild" DependsOnTargets="Clean;Build" Outputs="@(ProjectBuilt)" />

  <Target Name="CheckSkipStrongNames" DependsOnTargets="RestoreSolutionPackages">
    <MSBuild Targets="CheckSkipStrongNames"
             Projects="tools\SkipStrongNames.targets" />
  </Target>

  <Target Name="EnableSkipStrongNames" DependsOnTargets="RestoreSolutionPackages">
    <MSBuild Targets="EnableSkipStrongNames"
             Projects="tools\SkipStrongNames.targets" />
  </Target>

  <Target Name="DisableSkipStrongNames" DependsOnTargets="RestoreSolutionPackages">
    <MSBuild Targets="DisableSkipStrongNames"
             Projects="tools\SkipStrongNames.targets" />
  </Target>

  <UsingTask TaskName="Xunit.Runner.MSBuild.xunit"
           AssemblyFile="packages\xunit.runners.2.0.0-beta-build2700\tools\xunit.runner.msbuild.dll" />

  <Target Name="Test" DependsOnTargets="CheckSkipStrongNames;Build">
    <xunit Assemblies="@(XunitAssembly)" Xml="$(OutputPath)TestResults.xml" />
  </Target>

  <!--<Target Name="Test" DependsOnTargets="CheckSkipStrongNames;Build">
    <MSBuild Projects="tools\xUnit.targets"
            Properties="Configuration=$(Configuration);$(BuildProperties)" />
  </Target>-->

  <Target Name="PackageUnsigned">
    <MSBuild Targets="Rebuild"
             Projects="$(MSBuildThisFileFullPath)"
             Properties="Configuration=$(Configuration);$(BuildProperties);BuildCoreOnly=true;InternalsInvisible=true;RunCodeAnalysis=false;StyleCopEnabled=false" />
    <MSBuild Targets="Build"
             Projects="src\NuGet\NuGet.proj"
             Properties="Configuration=$(Configuration)"
             Condition="'$(Configuration)' == '$(Configuration45)'" />
  </Target>
  
  <Target Name="PackageSigned">
    <Error Text="Unable to locate private key: '$(PrivateKey)'" Condition="!Exists('$(PrivateKey)')" />
    <MSBuild Targets="Rebuild"
             Projects="$(MSBuildThisFileFullPath)"
             Properties="Configuration=$(Configuration);$(BuildProperties);BuildCoreOnly=true;InternalsInvisible=true;RunCodeAnalysis=false;StyleCopEnabled=false">
      <Output ItemName="ProjectBuilt" TaskParameter="TargetOutputs" />
    </MSBuild>
    <MSBuild Targets="SignAssembly"
             Projects="tools\DelaySigning.targets"
             Properties="ProjectToSign=%(ProjectBuilt.Identity)"
             Condition="'%(ProjectBuilt.DelaySigning)' == 'true'" />
    <MSBuild Targets="Build"
             Projects="src\NuGet\NuGet.proj"
             Properties="Configuration=$(Configuration)"
             Condition="'$(Configuration)' == '$(Configuration45)'" />
  </Target>
  
  <Target Name="Package" DependsOnTargets="$(PackageDependsOn)">
  </Target>

  <Target Name="CodeCoverage" DependsOnTargets="RestoreSolutionPackages;Build">
    <!--<MSBuild Projects="tools\OpenCover.targets"
            Properties="Configuration=$(Configuration);$(BuildProperties)" />-->
  </Target>
</Project>